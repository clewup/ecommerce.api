// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ecommerce.api.Data;

#nullable disable

namespace ecommerce.api.Migrations
{
    [DbContext(typeof(EcommerceDbContext))]
    [Migration("20221211172233_ColumnRefactor")]
    partial class ColumnRefactor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ecommerce.api.Entities.CartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(5);

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnOrder(6);

                    b.Property<double>("Total")
                        .HasColumnType("double precision")
                        .HasColumnOrder(8);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ecommerce.api.Entities.CartProductEntity", b =>
                {
                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(7);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProducts", (string)null);
                });

            modelBuilder.Entity("ecommerce.api.Entities.ImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(5);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(8);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(10);

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnOrder(6);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(7);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(9);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ecommerce.api.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(5);

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(8);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(17);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(19);

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(18);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(12);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(10);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(11);

                    b.Property<string>("LineOne")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(13);

                    b.Property<string>("LineThree")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(15);

                    b.Property<string>("LineTwo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(14);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(9);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(16);

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnOrder(6);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(7);

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ecommerce.api.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(5);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(9);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(10);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(8);

                    b.Property<double>("Discount")
                        .HasColumnType("double precision")
                        .HasColumnOrder(12);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(7);

                    b.Property<double>("PricePerUnit")
                        .HasColumnType("double precision")
                        .HasColumnOrder(11);

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnOrder(6);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ecommerce.api.Entities.CartProductEntity", b =>
                {
                    b.HasOne("ecommerce.api.Entities.CartEntity", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ecommerce.api.Entities.ProductEntity", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ecommerce.api.Entities.ImageEntity", b =>
                {
                    b.HasOne("ecommerce.api.Entities.ProductEntity", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ecommerce.api.Entities.OrderEntity", b =>
                {
                    b.HasOne("ecommerce.api.Entities.CartEntity", "Cart")
                        .WithOne("Order")
                        .HasForeignKey("ecommerce.api.Entities.OrderEntity", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("ecommerce.api.Entities.CartEntity", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("ecommerce.api.Entities.ProductEntity", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
